import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author Put your name here
 *
 */
public final class RSSAggregator {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSAggregator() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";
        //defining integers for childelement method

        int i = getChildElement(channel, "title");
        //defining xmltrees for children of element
        XMLTree title = channel.child(i);
        int j = getChildElement(channel, "link");
        XMLTree link = channel.child(j);
        int k = getChildElement(channel, "description");
        XMLTree description = channel.child(k);
        //opening tags
        out.println("<html>");
        out.println("<head>");
        out.println("<title>");
        //if statement for title, link, & description that say if there is a
        //label on tag, it exists & if not will output in table that it doesn't
        //exist.
        if (title.numberOfChildren() > 0) {
            out.println(title.child(0).label() + "</title></head>");
        } else {
            out.println("No Title Available" + "</title></head>");
        }
        if (link.numberOfChildren() > 0) {
            out.println("<body><h1><a href =\"" + link.child(0).label() + "\">"
                    + title.child(0).label() + "</a></h1>");
        } else {
            out.println(
                    "<body><h1><a href =\"" + "\"No Title Available</a></h1>");
        }

        out.println("<p>");

        if (description.numberOfChildren() > 0) {
            out.println(description.child(0).label());
        } else {
            out.println("No Description Available");
        }
        //opening tags for table, date, source, and news.
        out.println("</p>");
        out.println("<table border =\"1\">");
        out.println("<tr>");
        out.println("<th>Date</th>");
        out.println("<th>Source</th>");
        out.println("<th>News</th>");
        out.println("</tr>");
    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";
        //closing tags for table, body, and html

        out.println("</table>");
        out.println("</body>");
        out.println("</html>");

    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";
        //boolean to reduce number of return values
        boolean t = true;
        //i will be index of tag, while index var is to reduce number of return
        //values.
        int i = 0;
        int index = -1;
        int children = xml.numberOfChildren();
        //while i is less than # of children for xml file & t is true
        while (i < children && t) {
            String tagNames = xml.child(i).label();
            //checking string equality for label of xml tree at index i
            //and tag used in argument
            if (tagNames.equals(tag)) {
                index = i;
                //breaks loop without using break
                t = false;
            } else {
                t = true;
            }
            i++;
        }
        return index;

    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";
        //initializing integers

        int i = getChildElement(item, "pubDate");
        int j = getChildElement(item, "source");
        int k = getChildElement(item, "title");
        out.println("<tr>");
        //conditionals for pubDate, source, and title. if # of children is
        //greater than -1, pubDate, source, and title will output. if not,
        //will not be available.
        if (i > -1) {
            XMLTree pubDate = item.child(i);
            out.println("<td>" + pubDate.child(0).label() + "</td>");
        } else {
            out.println("<td>No date available</td>");
        }
        if (j > -1) {
            XMLTree source = item.child(j);
            if (source.hasAttribute("url")) {
                out.println("<td><a href=\"" + source.attributeValue("url")
                        + "\">" + source.child(0).label() + "</a></td>");
            }
        } else {
            out.println("<td> No source available </td>");
        }
        //This one is a bit more complicated because it depends on if it's a
        //description or link.
        //conditional for if there's a link to the title, else just outputs the
        //title
        if (k > -1 && item.child(k).numberOfChildren() > 0) {
            XMLTree title = item.child(k);
            if (getChildElement(item, "link") > -1) {
                out.println("<td><a href = \""
                        + item.child(getChildElement(item, "link")).child(0)
                                .label()
                        + "\">" + title.child(0).label() + "</a></td>");
            } else {
                out.println("<td>" + title.child(0).label() + "</td>");
            }
            //conditional that checks for a description
        } else if (getChildElement(item, "description") > -1) {
            XMLTree description = item
                    .child(getChildElement(item, "description"));
            //if no title available, description with link will print
            if (getChildElement(item, "link") > -1) {
                out.println("<td><a href = \""
                        + item.child(getChildElement(item, "link")).child(0)
                                .label()
                        + "\">" + description.child(0).label() + "</a></td>");
            } else {
                out.println("<td>" + description.child(0).label() + "</td>");
            }
            //if no description or title, will say that.
        } else {
            out.println("<td> No title or description available </td>");
        }
        out.println("</tr>");
    }

    /**
     * Processes one XML RSS (version 2.0) feed from a given URL converting it
     * into the corresponding HTML output file.
     *
     * @param url
     *            the URL of the RSS feed
     * @param file
     *            the name of the HTML output file
     * @param out
     *            the output stream to report progress or errors
     * @updates out.content
     * @requires out.is_open
     * @ensures <pre>
     * [reads RSS feed from url, saves HTML document with table of news items
     *   to file, appends to out.content any needed messages]
     * </pre>
     */
    private static void processFeed(String url, String file, SimpleWriter out) {
        //naming variables
        XMLTree xml = new XMLTree1(url);
        XMLTree channel = xml.child(0);
        SimpleWriter html = new SimpleWriter1L(file);
        //calling header method
        outputHeader(channel, html);
        //loop that checks if channel has tag, if so, will check if label has
        //item tag, if so, process item method will run
        int i = 0;
        for (i = 0; i < channel.numberOfChildren(); i++) {
            if (channel.child(i).isTag()) {
                if (channel.child(i).label().equals("item")) {
                    processItem(channel.child(i), html);
                }
            }
        }
        //calling output footer method
        outputFooter(html);
        html.close();
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();
        out.println("Input a URL");
        String input = in.nextLine();
        out.println("Where would you like the output file to be?");
        String fileName = in.nextLine();
        //creating scanner for html file
        SimpleWriter html = new SimpleWriter1L(fileName);
        //creating xml trees for methods
        XMLTree feeds = new XMLTree1(input);
        //creating html page
        html.println("<html>");
        html.println("<head>");
        //if xmltree has title attribute, title will print and create title
        //for webpage. uhi
        if (feeds.hasAttribute("title")) {
            html.println("<title>" + feeds.attributeValue("title"));
            html.println("</title>");
            html.println("</head>");
            //creates body and heading
            html.println("<body>");
            html.println("<h2>" + feeds.attributeValue("title") + "</h2>");
        } else {
            html.println("No title available");
        }
        //making list
        html.println("<ul>");
        //calling method
        //for loop and calling method when i is less than number of children in
        //xml tree.
        for (int i = 0; i < feeds.numberOfChildren(); i++) {
            XMLTree xml1 = feeds.child(i);
            //conditional if there's url and file, calls method and adds link
            //for the webpage
            if ((xml1.hasAttribute("url")) && (xml1.hasAttribute("file"))) {
                processFeed((xml1.attributeValue("url")),
                        (xml1.attributeValue("file")), out);
                html.println("<li><a href =\"" + xml1.attributeValue("file")
                        + "\">" + xml1.attributeValue("name") + "</a></li>");
            }
        }
        html.println("</ul>");
        html.println("</body>");
        html.println("</html>");

        //closing scanners and calling last method to output closing tags
        in.close();
        out.close();
        html.close();

    }

}
